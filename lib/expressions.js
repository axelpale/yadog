exports.codeBlock = /^\s{4}/
exports.comment = /^\s*\/\/(?!\/) ?(.*)$/
exports.dotLine = /^\s*\.\.\.?(.*)$/
exports.empty = /^\s*$/
exports.excludedComment = /^\s*\/\/\/+/
exports.indentation = /^([\s-]*)(.*)$/
exports.lineEnd = /\r?\n/
// exports.exportsAlias = /^exports\.(\w+) = exports\.(\w+)$/
// exports.exportsConstant = /^exports\.(\w+) = ((?!require).*)$/
// exports.exportsRequire = /^exports\.(\w+) = require\(["'](\.[\w/.]*)["']\)$/
exports.function = /^module\.exports = (?:function )?(\([\w, ]*\))(?: =>)? {$/
exports.genversion = /generated by genversion/i
exports.import = /^import ["'](\.[\w/.]*)["']/
exports.importFrom = /^import .* from ["'](\.[\w/.]*)["']/
// exports.moduleRequire = /^module.exports = require\(["'](\.[\w/.]*)["']\)$/
exports.parameterName = /^(\s+)(\w*)$/
exports.parameterDesc = /^(\s+)(.*)$/
exports.requireModule = /[\s=]require\(["'](\.[\w/.]*)["']\)/
exports.returnValue = /^(\s+)(.*)$/
exports.exampleCode = /^(\s+)(.*)$/
exports.arrayLiteral = /\[([\w,: ]*)\]($|[^(]+)/
exports.objectLiteral = /{([\w,: ]*)}/

exports.nameInSignature = /^([\w.:#/]+)/

exports.callSignature = (name) => {
  // Create an expression for name-based signature that
  // begins a valid comment block.
  //
  // Parameters:
  //   name
  //     string
  //
  // Return
  //   a RegExp
  //

  // Escape literal dots in names
  const escName = name.replace('.', '\\.')
  // Note JS escapes \\ -> \ and \/ -> /
  const signaturePattern = '^\\s*// (' + escName + '.*)'
  return new RegExp(signaturePattern)
}
