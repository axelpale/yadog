exports.codeBlock = /^\s{4}/
exports.comment = /^\s*\/\/(?!\/) ?(.*)$/
exports.dotLine = /^\s*\.\.\.?(.*)$/
exports.empty = /^\s*$/
exports.emptyComment = /^\s*\/\/+\s*$/
exports.excludedComment = /^\s*\/\/\/+/
exports.indentation = /^([\s-]*)(.*)$/
exports.lineEnd = /\r?\n/
// exports.exportsAlias = /^exports\.(\w+) = exports\.(\w+)$/
// exports.exportsConstant = /^exports\.(\w+) = ((?!require).*)$/
// exports.exportsRequire = /^exports\.(\w+) = require\(["'](\.[\w/.]*)["']\)$/
exports.function = /^module\.exports = (?:function )?(\([\w, ]*\))(?: =>)? {$/
exports.genversion = /generated by genversion/i
exports.import = /^import ["'](\.[\w/.]*)["']/
exports.importFrom = /^import .* from ["'](\.[\w/.]*)["']/
// exports.moduleRequire = /^module.exports = require\(["'](\.[\w/.]*)["']\)$/
exports.parameterName = /^(\s+)(\w*)$/
exports.parameterDesc = /^(\s+)(.*)$/
exports.requireModule = /[\s=]require\(["'](\.[\w/.]*)["']\)/
exports.returnValue = /^(\s+)(.*)$/
exports.exampleCode = /^(\s+)(.*)$/
exports.arrayLiteral = /\[([\w,: ]*)\]($|[^(]+)/
exports.objectLiteral = /{([\w,: ]*)}/

exports.nameInSignature = /^([\w .:#/]+)/
exports.nameDepthSeparator = /[- .:#/]/

exports.callSignature = (earmark, namemap) => {
  // Create a regular expression for name-based signature that
  // begins a valid comment block.
  //
  // Captures the call signature of a function or variable or constant
  // from the comment block. May include parenthesis, for example
  // 'mylib.myfunction(some, params...)' is a valid call signature.
  // Or 'mylib-myfunction[some params ...]' or 'mylib:myfunction',
  // or like, any string after the '// @' syntax.
  //
  // Parameters:
  //   earmark
  //     a string, like `@`
  //   namemap
  //     an object of strings, a map from allowed names to their full names.
  //
  // Return
  //   a RegExp
  //

  // Earmark. Unnecessary non-capturing parenthesis?
  const earmarkPattern = '(?:' + earmark + ')'
  // Names, only the short ones. TODO pick also the full variants?
  const names = Object.keys(namemap)
  // Escape literal dots in names
  const escNames = names.map(name => name.replace('.', '\\.'))
  // Combine with OR
  const namesPattern = '(' + escNames.join('|') + ')'
  // Note: JS escapes \\ -> \ and \/ -> /
  // Example match: '  // @doghouse'
  const signaturePattern = '^\\s*// ' + earmarkPattern +
    '\\s*(' + namesPattern + '.*)'

  return new RegExp(signaturePattern)
}
